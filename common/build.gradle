plugins {
    id 'multiloader-common'
    id 'net.neoforged.moddev.legacyforge'
}

repositories {
    maven {
        url = "https://api.modrinth.com/maven"
    }
    maven {
        url = "https://jm.gserv.me/repository/maven-public/"
    }
    mavenCentral()
}

legacyForge {
    mcpVersion = minecraft_version
    if (file("src/main/resources/META-INF/accesstransformer-common.cfg").exists()) {
        accessTransformers = ["src/main/resources/META-INF/accesstransformer-common.cfg"]
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }
}

dependencies {
    compileOnly group: 'org.spongepowered', name: 'mixin', version: '0.8.5'
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

    // fabric and neoforge both bundle mixinextras, so it is safe to use it in common
    compileOnly group: 'io.github.llamalad7', name: 'mixinextras-common', version: '0.3.5'
    annotationProcessor group: 'io.github.llamalad7', name: 'mixinextras-common', version: '0.3.5'

    compileOnly("org.ow2.asm:asm-tree:9.3")

    //config
    compileOnly("com.electronwill.night-config:toml:3.6.0")
}

configurations {
    commonJava {
        canBeResolved = false
        canBeConsumed = true
    }
    commonResources {
        canBeResolved = false
        canBeConsumed = true
    }
}

artifacts {
    commonJava sourceSets.main.java.sourceDirectories.singleFile
    commonResources sourceSets.main.resources.sourceDirectories.singleFile
}

tasks.withType(Javadoc).configureEach { enabled = false }
